<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Controllers on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop.com/1.7/modules/concepts/controllers/</link>
    <description>Recent content in Controllers on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Apr 2018 10:44:43 +0100</lastBuildDate>
    
	<atom:link href="https://devdocs.prestashop.com/1.7/modules/concepts/controllers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Front controllers</title>
      <link>https://devdocs.prestashop.com/1.7/modules/concepts/controllers/front-controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/modules/concepts/controllers/front-controllers/</guid>
      <description>Front controllers These class are accessible from the front-office and add features to the customers.
Creating a front controller In order to have a front controller read by PrestaShop, these 3 rules have to be followed:
 it is stored in the subfolder controllers/front/ of the module. in CamelCase, the class name follows this format: &amp;lt;ModuleName&amp;gt;&amp;lt;FileName&amp;gt;ModuleFrontController. it extends the class ModuleFrontController.  Minimum controller example Let&amp;rsquo;s say we want a controller responsible of payments validation in our module cheque.</description>
    </item>
    
    <item>
      <title>Admin controllers</title>
      <link>https://devdocs.prestashop.com/1.7/modules/concepts/controllers/admin-controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/modules/concepts/controllers/admin-controllers/</guid>
      <description>Create Admin module controllers   Since 1.7.3 you create and override templates and services in your modules. Since 1.7.4, you can create and override forms and console commands. Since 1.7.5, you can create your own &amp;ldquo;modern&amp;rdquo; controllers!  Starting on PrestaShop 1.7.5, you can rely on the modern environment to add new entry points to your applications.
Using modern pages, you will have access to the PrestaShop debug toolbar, the service container, Twig and Doctrine, among others.</description>
    </item>
    
    <item>
      <title>KPI block in Admin pages</title>
      <link>https://devdocs.prestashop.com/1.7/modules/concepts/controllers/kpi-blocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/modules/concepts/controllers/kpi-blocks/</guid>
      <description>How to add a KPI block in admin pages  A KPI block (also called KPI row) is shown here:
  KPI Block   You can follow these steps to easily add a KPI row to a modern page:
 Define your KPI classes:  You can use one of existing KPI classes, from PrestaShop\PrestaShop\Adapter\Kpi namespace, You can create new classes - they must implement the PrestaShop\PrestaShop\Core\Kpi\KpiInterface  Define a KPI row factory service in src/PrestaShopBundle/Resources/config/services/core/kpi.</description>
    </item>
    
  </channel>
</rss>